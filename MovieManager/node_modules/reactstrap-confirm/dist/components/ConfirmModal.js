"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactstrap = require("reactstrap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ConfirmModal = function ConfirmModal(_ref) {
  var onClose = _ref.onClose,
      message = _ref.message,
      title = _ref.title,
      confirmText = _ref.confirmText,
      cancelText = _ref.cancelText,
      confirmColor = _ref.confirmColor,
      cancelColor = _ref.cancelColor,
      className = _ref.className,
      buttonsComponent = _ref.buttonsComponent,
      size = _ref.size,
      bodyComponent = _ref.bodyComponent,
      modalProps = _ref.modalProps;

  var buttonsContent = /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, cancelText && /*#__PURE__*/_react["default"].createElement(_reactstrap.Button, {
    color: cancelColor,
    onClick: function onClick() {
      return onClose(false);
    }
  }, cancelText), ' ', /*#__PURE__*/_react["default"].createElement(_reactstrap.Button, {
    color: confirmColor,
    onClick: function onClick() {
      return onClose(true);
    }
  }, confirmText));

  if (buttonsComponent) {
    var CustomComponent = buttonsComponent;
    buttonsContent = /*#__PURE__*/_react["default"].createElement(CustomComponent, {
      onClose: onClose
    });
  }

  var BodyComponent = bodyComponent;
  return /*#__PURE__*/_react["default"].createElement(_reactstrap.Modal, _extends({
    size: size,
    isOpen: true,
    toggle: function toggle() {
      return onClose(false);
    },
    className: "reactstrap-confirm ".concat(className)
  }, modalProps), title && /*#__PURE__*/_react["default"].createElement(_reactstrap.ModalHeader, {
    toggle: function toggle() {
      return onClose(false);
    }
  }, title || null), /*#__PURE__*/_react["default"].createElement(_reactstrap.ModalBody, null, bodyComponent ? /*#__PURE__*/_react["default"].createElement(BodyComponent, null) : message), /*#__PURE__*/_react["default"].createElement(_reactstrap.ModalFooter, null, buttonsContent));
};

ConfirmModal.defaultProps = {
  message: 'Are you sure?',
  title: 'Warning!',
  confirmText: 'Ok',
  cancelText: 'Cancel',
  confirmColor: 'primary',
  cancelColor: '',
  className: '',
  buttonsComponent: null,
  size: null,
  bodyComponent: null,
  modalProps: {}
};
ConfirmModal.propTypes = {
  onClose: _propTypes["default"].func.isRequired,
  message: _propTypes["default"].node,
  title: _propTypes["default"].node,
  confirmText: _propTypes["default"].node,
  cancelText: _propTypes["default"].node,
  confirmColor: _propTypes["default"].string,
  cancelColor: _propTypes["default"].string,
  className: _propTypes["default"].string,
  size: _propTypes["default"].string,
  buttonsComponent: _propTypes["default"].func,
  bodyComponent: _propTypes["default"].func,
  modalProps: _propTypes["default"].object
};
var _default = ConfirmModal;
exports["default"] = _default;